Question 2 - Inheritance and Polymorphism
2-1. (15 marks) Define and implement a class named Helicopter, which represents a special kind of aircraft. It is to be defined by inheriting from the AirCraft class. The Helicopter class has the following constructor:

Helicopter(int w, string n)     // creates a Helicopter with weight w and name n

string name;                    // name of the Helicopter
void fly(int headwind, int minutes);
Helicopter has a default constructor that does nothing.

Following the principles of encapsulation and information hiding, set the proper access modifiers for the attributes and provide methods to access the object’s data. The get and set function names should be the attribute name prefixed with "get_" or "set_" respectively.

Your Helicopter class should define the fly() method, which was inherited from AirCraft. When a helicopter flies, it will use 0.2% of its fuel for every minute it flies, unless there is a headwind of 40km/hour or more, and then it will use 0.4% of its fuel for each minute it flies. For every kilogram over 5670kg, it will use 0.01% extra fuel each minute.

E.g. if fuel is at 80%, and a 5690kg helicopter flies for 10 minutes into a 45km/hour headwind, the fuel will be 80% minus (0.4 * 10 minutes) minus (0.01 * 20kg * 10 minutes) = 74%.

After each flight, increment numberOfFlights by 1.

If a flight would result in the Helicopter finishing with less than 20% fuel it will not take off and fly, wont use fuel, and will not increment numberOfFlights. 

Save your code in Helicopter.cpp and Helicopter.h, so we can check that your code compiles. Implement a program with a main method that tests your code in a file called main-2-1.cpp.

 

2-2. (10 marks) Define and implement a class named Airplane. It is to be defined by inheriting from the AirCraft class. The Airplane class has the following constructor and behaviour:

Airplane();                       
Airplane(int w, int p);           // Create Airplane with weight w and passengers p

int numPassengers;               // number of passengers on the Airplane

void reducePassengers(int x);     // reduce passenger list by x
int get_numPassengers();
void fly(int headwind, int minutes);          
The function reducePassengers removes x passengers from the numPassengers attribute. There are no negative passengers on an aircraft. If the amount of numPassengers is below 0, it should set the numPassengers attribute to 0. The get_numPassengers function returns the numPassengers attribute. The other methods should behave the same as for the parent class.

There is no setter for numPassengers.

Your Airplane class should define the fly() method, which was inherited from AirCraft. When a plane flies, it will use 0.3% of its fuel for every minute it flies, unless there is a headwind of 60km/hour or more, and then it will use 0.5% of its fuel for each minute it flies. For every passenger, it will use 0.001% extra fuel each minute. E.g. if fuel is at 95%, and a plane with 100 passengers flies for 120 minutes into a 65km/hour headwind, the fuel will be 95% minus (0.5 * 120) minus (0.001 * 100 * 120) = 23%. After each flight, increment numberOfFlights by 1. If a flight would result in the Airplane finishing with less than 20% fuel it will not take off and fly and will not increment numberOfFlights.. 

Save your code in Airplane.cpp and Airplane.h, so we can check that your code compiles. Implement a program with a main method that tests your code in a file called main-2-2.cpp.

 

Question 3 - Aggregation
3-1. (10 marks) Define and implement a class named AirFleet that has the following public constructor and behaviour:

AirFleet()                          
/* creates an air fleet containing pointers to 5 AirCraft objects as an array; 
*/

AirCraft **fleet;
AirCraft **get_fleet()      // returns the array of pointers to the five aircraft objects
When the constructor is called, it should create and add the following objects to fleet:

Airplane(20, 10);
Helicopter(10000, "BlackHawk"); 
AirCraft(5000);
Helicopter(100, "WhiteHawk");
Airplane(15, 20);
You will need to make sure that these objects are instantiated correctly and assigned to the required locations appropriately in the same order as mentioned above. Following the principles of encapsulation and information hiding, set the proper access modifiers for the attributes and provide methods to access the object’s data.

Save your code in AirFleet.cpp and AirFleet.h, so we can check that your code compiles. Implement a program with a main method that tests your code in a file called main-3-1.cpp.

Submit all files.


anh xong airplane roi sao em ko qua lay


câu heli nó sai vầy nè anh anh xem cách của em, rồi sửa giúp em với


check heli di em
